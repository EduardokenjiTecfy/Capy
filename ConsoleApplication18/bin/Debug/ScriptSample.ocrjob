<Job mc:Ignorable="sap sap2010 sads" DisplayName="Scripting Sample" sap2010:WorkflowViewState.IdRef="Job_1" InputXML="(XML content)"
 xmlns="clr-namespace:Nuance.OmniPage.CSDK.IproPlus.JobDesign.BuiltIn;assembly=Nuance.OmniPageSDK.IproPlus.JobDesign.BuiltIn"
 xmlns:local="clr-namespace:;assembly=CSDK"
 xmlns:local1="clr-namespace:;assembly=Converters"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:nocij="clr-namespace:Nuance.OmniPage.CSDK.IproPlus.JobDesign;assembly=Nuance.OmniPageSDK.IproPlus.JobDesign"
 xmlns:nocijbc="clr-namespace:Nuance.OmniPage.CSDK.IproPlus.JobDesign.BuiltIn.CSDK;assembly=Nuance.OmniPageSDK.IproPlus.JobDesign.BuiltIn"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Job.Activities>
    <Workflow Output="{x:Null}" XMLOutput="{x:Null}" Converter="" sap2010:WorkflowViewState.IdRef="Workflow_1" InputXML="(XML content)" OutputXML="(none)" Type="CWFF_LOADIMG, CWFF_RECOGNIZE">
      <Workflow.Inputs>
        <scg:List x:TypeArguments="FileName" Capacity="4">
          <FileName>.\LOW_RESOL_COLOR.JPG</FileName>
        </scg:List>
      </Workflow.Inputs>
      <Workflow.Parameters>
        <nocijbc:Parameters>
          <nocijbc:Parameters.Parameter>
            <local:Parameters SP_LDI_LANGUAGES="{x:Null}" SP_RCI_BARTYPES="{x:Null}" SP_RCI_FONTNAMES="{x:Null}" SP_RCI_LANGUAGES="{x:Null}" SP_RCI_PROFDICT="{x:Null}" SP_ATM_FALLBACKONFAIL="False" SP_ATM_MANZONE="False" SP_ATM_POPBKGNDZONES="False" SP_ATM_SKIPZONELESSPAGE="False" SP_ATM_TEMPFILENAME="" SP_ATM_TRYASFORM="False" SP_EXP_APPENDPROMPT="False" SP_EXP_BARCODEPAGEIMAGEINDEX="1" SP_EXP_BARCODESEPARATION="False" SP_EXP_BARCODETEXT="" SP_EXP_CONVERTERNAME="Converters.Text.RTF2000" SP_EXP_CONVERTPROMPT="True" SP_EXP_FILEOPTIONS="CONV_FILEOPTIONS_1FILE" SP_EXP_FORMATTINGLEVEL="CONV_FORMATLEVEL_RFP" SP_EXP_GENERATEOUTPUT="True" SP_EXP_HASFOLDERNOTES="False" SP_EXP_HASPPLAUNCH="False" SP_EXP_HASPROMPTFORDEST="True" SP_EXP_HASSAVEANDLAUNCH="False" SP_EXP_HASTIMESTAMP="False" SP_EXP_INCLUDEBARCODESEPARATOR="False" SP_EXP_OVERWRITEPROMPT="False" SP_EXP_PAGERANGE="CONV_PAGERANGE_ALL" SP_EXP_PASSWORDPROMPT="True" SP_EXP_POSTBARCODESEPARATION="False" SP_EXP_PROMPTPATH="C:\Users\Bartha_Laszlo\Documents" SP_EXP_SKIPSINGLEOUTPUTNUMBERING="False" SP_EXP_TIMESTAMP="" SP_EXP_TIMESTAMPTYPE="0" SP_LDI_ADVANCED="False" SP_LDI_AUTOCROP="False" SP_LDI_BLANKPAGESENSITIVITY="50" SP_LDI_DESKEW="True" SP_LDI_DESPECKLE="True" SP_LDI_DESPECKLEDITHERING="True" SP_LDI_DIGITALCAMERA="False" SP_LDI_DOPREVIEW="True" SP_LDI_DOUBLEPAGE="False" SP_LDI_DOWNSAMPLE="False" SP_LDI_IGNOREPDFTAGS="False" SP_LDI_LEGALPLEADING="False" SP_LDI_NEWPAGEINDEX="0" SP_LDI_NEWPAGEPOS="NPP_AFTER_LAST" SP_LDI_OPENPDFASIMAGE="False" SP_LDI_PAGEROTATION="ROT_AUTO" SP_LDI_PDFPASSWORD="" SP_LDI_PROMPTFORINPUT="True" SP_LDI_PROMPTPATH="C:\Users\Bartha_Laszlo\Documents" SP_LDI_REMOVEBLANKPAGES="False" SP_LDI_REMOVEBORDER="False" SP_LDI_REMOVEPUNCHHOLES="False" SP_LDI_SHOWOPENDLG="True" SP_LDI_SINGLESEL="False" SP_RCI_ADDITIONALCHARS="" SP_RCI_AUTODETECTLANG="False" SP_RCI_AUTOLANGUAGE="False" SP_RCI_CUSTOMLAYOUT="263172" SP_RCI_INSERTFULLPAGEZONE="False" SP_RCI_LOOKFORHEADERFOOTER="False" SP_RCI_LOOKFORHYPERLINK="True" SP_RCI_OPTIMIZESPEED="False" SP_RCI_PAGELAYOUT="PAGELAYOUT_AUTO" SP_RCI_PRESERVCOLORGRAPH="True" SP_RCI_PRESERVCOLORTEXT="True" SP_RCI_REJECTCHARS="~" SP_RCI_RERECOGNIZE="False" SP_RCI_USEPDFFONTS="True" SP_RCI_USERDICT="" />
          </nocijbc:Parameters.Parameter>
        </nocijbc:Parameters>
      </Workflow.Parameters>
      <Workflow.Properties>
        <nocijbc:Properties>
          <nocijbc:Properties.Converters>
            <local1:Converters Converters_Image_TIFF="{x:Null}" Converters_Text_DCsv="{x:Null}" Converters_Text_PDF="{x:Null}" Converters_Text_RTF2000="{x:Null}" Converters_Text_Text="{x:Null}" />
          </nocijbc:Properties.Converters>
        </nocijbc:Properties>
      </Workflow.Properties>
      <Workflow.RuntimeErrors>
        <scg:List x:TypeArguments="nocij:RuntimeError" Capacity="0" />
      </Workflow.RuntimeErrors>
      <Workflow.Settings>
        <nocijbc:Settings>
          <nocijbc:Settings.Setting>
            <local:Setting Formatter="{x:Null}" Global="{x:Null}" Kernel="{x:Null}" Processing="{x:Null}" />
          </nocijbc:Settings.Setting>
        </nocijbc:Settings>
      </Workflow.Settings>
      <Workflow.StartError>
        <nocij:ExecutionError Error="0" ErrorString="Successful operation, no error. (REC_OK)" />
      </Workflow.StartError>
    </Workflow>
    <ScriptedJobItem CSharpScript="//This code is from Custom JobItem project (roughly...)&#xD;&#xA;&#xD;&#xA;//You can debug your script with local OCR service only:&#xD;&#xA;//1. Register OcrService.exe with /regserver or /service switch.&#xD;&#xA;//2. Register OcrServer.exe with /regserver.&#xD;&#xA;//3. Launch ServiceDemo.exe, note it will start OcrService.exe.&#xD;&#xA;//4. Be sure that there is no running OcrServer.exe instance (Task Manager).&#xD;&#xA;//5. Launch OcrServer.exe manually.&#xD;&#xA;//6. Launch Visual Studio, and attach to OcrServer.exe. Specify code type: &quot;Managed(v4.6,v4.5,v4.0)&quot;&#xD;&#xA;//7. Prepare a Job with your script, do not forget to set Debug property to True;&#xD;&#xA;//8. Place your break points, i.e. insert &quot;System.Diagnostics.Debugger.Break();&quot; into your script.&#xD;&#xA;//9. Start the job containing your script.&#xD;&#xA;//10. Be patient, don't worry, be happy, and wait for the miracle:).&#xD;&#xA;//OR&#xD;&#xA;//1. Register OcrService.exe with /regserver or /service switch.&#xD;&#xA;//2. Register OcrServer.exe with /regserver.&#xD;&#xA;//3. Launch ServiceDemo.exe, note it will start OcrService.exe.&#xD;&#xA;//4. Prepare a Job with your script, do not forget to set Debug property to True;&#xD;&#xA;//5. Select a Debugger for script&#xD;&#xA;//6. Start the job containing your script.&#xD;&#xA;//7. Be patient, don't worry, be happy, and wait for the miracle:).&#xD;&#xA;//&#xD;&#xA;//DO NOT FORGET to increase PingTime, Timeout and RpcTimeout in OCRService.ini (%programdata%\Nuance\OmniPage OCR Service\OCRService.ini)&#xD;&#xA;//Multiply default values by 100 (at least:))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Nuance.OmniPage.CSDK.IproPlus;&#xD;&#xA;using System.Runtime.InteropServices;&#xD;&#xA;using System.Xml.XPath;&#xD;&#xA;using System.Collections;&#xD;&#xA;using System.Xml.Linq;&#xD;&#xA;using Microsoft.Win32;&#xD;&#xA;&#xD;&#xA;namespace CustomJobItemCS&#xD;&#xA;{&#xD;&#xA;	public class CustomJobItem : JobItem&#xD;&#xA;	{&#xD;&#xA;		public string XMLOutput { get; set; }&#xD;&#xA;		bool HasResult { get; set; }&#xD;&#xA;		public Exception Exception { get; set; }&#xD;&#xA;		public override event JobItem.NewObjectDelegate NewObject;&#xD;&#xA;		public override event JobItem.DoneDelegate Done;&#xD;&#xA;		public override event JobItem.ProgressDelegate Progress;&#xD;&#xA;		public override event JobItem.NeedResultDelegate NeedResult { add { } remove { } }&#xD;&#xA;&#xD;&#xA;		public override void GetResult(out int Error, out int[] HRESULTs, out string[,] Errors, out string ResponseFile)&#xD;&#xA;		{&#xD;&#xA;			if (Exception == null)&#xD;&#xA;				Error = 0;&#xD;&#xA;			else&#xD;&#xA;				Error = Exception.HResult;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;			HRESULTs = null;&#xD;&#xA;			Errors = null;&#xD;&#xA;			ResponseFile = XMLOutput;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		public override void Ping(bool KickIdle, long TimeOutMilSec)&#xD;&#xA;		{&#xD;&#xA;			if (HasResult &amp;&amp; KickIdle &amp;&amp; Done != null)&#xD;&#xA;				Done();&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		public override void Run()&#xD;&#xA;		{&#xD;&#xA;			//System.Diagnostics.Debugger.Break();&#xD;&#xA;			HasResult = false;&#xD;&#xA;			Exception = null;&#xD;&#xA;			XMLOutput = null;&#xD;&#xA;			try&#xD;&#xA;			{&#xD;&#xA;				IEnumerable enumerable = XElement.XPathEvaluate(&quot;.//OutputXML/@value&quot;) as IEnumerable;&#xD;&#xA;				if (enumerable != null)&#xD;&#xA;				{&#xD;&#xA;					string output = enumerable.Cast&lt;XAttribute&gt;().FirstOrDefault().Value;&#xD;&#xA;					if (!string.IsNullOrEmpty(output))&#xD;&#xA;					{&#xD;&#xA;						Pages pages = null;&#xD;&#xA;						Document.GetPages(out pages);&#xD;&#xA;						using (pages)&#xD;&#xA;						{&#xD;&#xA;							Dictionary&lt;string, Dictionary&lt;int, int&gt;&gt; result = new Dictionary&lt;string, Dictionary&lt;int, int&gt;&gt;();&#xD;&#xA;							enumerable = XElement.XPathEvaluate(&quot;.//Word/@value&quot;) as IEnumerable;&#xD;&#xA;							foreach (XAttribute attrib in enumerable)&#xD;&#xA;							{&#xD;&#xA;								if (NewObject != null)&#xD;&#xA;									NewObject();&#xD;&#xA;								Dictionary&lt;int, int&gt; found = new Dictionary&lt;int, int&gt;();&#xD;&#xA;								result.Add(attrib.Value, found);&#xD;&#xA;								SearchText searchtext = null;&#xD;&#xA;								Document.GetFindText(0, 0, attrib.Value, FINDTEXTFLAG.FTF_WHOLEWORD, 0, out searchtext);&#xD;&#xA;								if (searchtext == null)&#xD;&#xA;									continue;&#xD;&#xA;								using (searchtext)&#xD;&#xA;								{&#xD;&#xA;									for (;;)&#xD;&#xA;									{&#xD;&#xA;										FINDTEXTCONTEXT context;&#xD;&#xA;										searchtext.Text(out context);&#xD;&#xA;										if (context.TextLen == 0)&#xD;&#xA;											break;&#xD;&#xA;										int number = 1;&#xD;&#xA;										if (found.TryGetValue(context.Page, out number))&#xD;&#xA;											found[context.Page] = ++number;&#xD;&#xA;										else&#xD;&#xA;											found.Add(context.Page, number);&#xD;&#xA;										searchtext.Next();&#xD;&#xA;										if (Progress != null)&#xD;&#xA;											Progress();&#xD;&#xA;									}&#xD;&#xA;								}&#xD;&#xA;							}&#xD;&#xA;							XDocument document = XDocument.Parse(&quot;&lt;JobResponse/&gt;&quot;);&#xD;&#xA;							XElement jobrequest = new XElement(&quot;JobRequest&quot;);&#xD;&#xA;							jobrequest.Add(XElement);&#xD;&#xA;							document.Root.Add(jobrequest);&#xD;&#xA;							XElement jobresult = new XElement(&quot;JobResult&quot;);&#xD;&#xA;							document.Root.Add(jobresult);&#xD;&#xA;							XElement words = new XElement(&quot;Words&quot;);&#xD;&#xA;							jobresult.Add(words);&#xD;&#xA;&#xD;&#xA;							foreach (KeyValuePair&lt;string, Dictionary&lt;int, int&gt;&gt; wordresult in result)&#xD;&#xA;							{&#xD;&#xA;								foreach (KeyValuePair&lt;int, int&gt; details in wordresult.Value)&#xD;&#xA;								{&#xD;&#xA;									Page page = null;&#xD;&#xA;									pages.GetItem(details.Key, out page);&#xD;&#xA;									using (page)&#xD;&#xA;									{&#xD;&#xA;										Image image = null;&#xD;&#xA;										page.GetImage(out image);&#xD;&#xA;										using (image)&#xD;&#xA;										{&#xD;&#xA;											string source = null;&#xD;&#xA;											int sourceindex = 0;&#xD;&#xA;											image.GetOrigin(out source, out sourceindex);&#xD;&#xA;											XElement word = new XElement(&quot;Word&quot;);&#xD;&#xA;											word.Add(new XAttribute(&quot;value&quot;, wordresult.Key));&#xD;&#xA;											word.Add(new XAttribute(&quot;pageindex&quot;, details.Key));&#xD;&#xA;											word.Add(new XAttribute(&quot;count&quot;, details.Value));&#xD;&#xA;											word.Add(new XAttribute(&quot;origin&quot;, source));&#xD;&#xA;											word.Add(new XAttribute(&quot;originindex&quot;, sourceindex));&#xD;&#xA;											words.Add(word);&#xD;&#xA;										}&#xD;&#xA;									}&#xD;&#xA;								}&#xD;&#xA;							}&#xD;&#xA;							WriteResult(document, output);&#xD;&#xA;							XMLOutput = output;&#xD;&#xA;						}&#xD;&#xA;					}&#xD;&#xA;				}&#xD;&#xA;			}&#xD;&#xA;			catch (Exception e)&#xD;&#xA;			{&#xD;&#xA;				Exception = e;&#xD;&#xA;				throw;&#xD;&#xA;			}&#xD;&#xA;			finally&#xD;&#xA;			{&#xD;&#xA;				HasResult = true;&#xD;&#xA;				if (Done != null)&#xD;&#xA;					Done();&#xD;&#xA;			}&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;" Debug="False" Debugger="" DisplayName="This script counts words" sap2010:WorkflowViewState.IdRef="ScriptedJobItem_1" InputXML="(XML content)" OutputXML="(XML content)" XMLOutput="%USERPROFILE%\My Documents\WordsByScript.xml" XMLParameters="  &lt;Words&gt;&#xD;&#xA;    &lt;Word value=&quot;Hilo&quot; /&gt;&#xD;&#xA;    &lt;Word value=&quot;Ocean&quot; /&gt;&#xD;&#xA;  &lt;/Words&gt;">
      <ScriptedJobItem.RuntimeErrors>
        <scg:List x:TypeArguments="nocij:RuntimeError" Capacity="0" />
      </ScriptedJobItem.RuntimeErrors>
      <ScriptedJobItem.StartError>
        <nocij:ExecutionError Error="0" ErrorString="Successful operation, no error. (REC_OK)" />
      </ScriptedJobItem.StartError>
    </ScriptedJobItem>
  </Job.Activities>
  <Job.StartError>
    <nocij:ExecutionError Error="0" ErrorString="Successful operation, no error. (REC_OK)" />
  </Job.StartError>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Workflow_1" sap:VirtualizedContainerService.HintSize="294.4,126.4" />
      <sap2010:ViewStateData Id="ScriptedJobItem_1" sap:VirtualizedContainerService.HintSize="294.4,81.6" />
      <sap2010:ViewStateData Id="Job_1" sap:VirtualizedContainerService.HintSize="316.8,372.8" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
  <sads:DebugSymbol.Symbol>d1tFOlxUZWFtU2VydmVyXENTREsxNlxNQUlOXERldmVsb3BtZW50XFRvb2xzXE9QU1xTZXJ2aWNlRGVtb1xDU0RLU2FtcGxlc1xTY3JpcHRTYW1wbGUub2Nyam9iAwEBRAcBAQ4FLxABAzAFNxcBAg==</sads:DebugSymbol.Symbol>
</Job>